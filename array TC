#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

// Constants
#define NUM_TEAMS 5         // Maximum number of clubs
#define SQUAD_SIZE 10       // Maximum players per club
#define NAME_LEN 25         // Maximum length of names
#define POSITION_LEN 20     // Maximum length of positions

// Struct Definitions
typedef struct {
    int day, month, year;   // Date of birth
} date_t;

typedef struct {
    char name[NAME_LEN];    // Player's full name
    int kit_number;         // Unique kit number
    date_t dob;             // Player's date of birth
    char position[POSITION_LEN]; // Player's position
} player_t;

typedef struct {
    char club_name[NAME_LEN];   // Club name
    player_t players[SQUAD_SIZE]; // Array of players
    int player_count;            // Current number of players in the club
} club_t;

// Global Variables
club_t clubs[NUM_TEAMS];    // Array to hold all clubs
int club_count = 0;         // Current number of enrolled clubs

// Function Prototypes
void display_menu();        // Display the main menu
void enroll_club();         // Add a new club
void add_player();          // Add a new player to a club
void search_update();       // Search and update player details
void display_club_statistics(); // Display club statistics
void handle_error(const char *message); // Print error messages

// Main Function
int main() {
    int choice;
    do {
        display_menu();  // Show menu options
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: enroll_club(); break;
            case 2: add_player(); break;
            case 3: search_update(); break;
            case 4: display_club_statistics(); break;
            default:
                if (choice != 0) // Handle invalid menu input
                    handle_error("Invalid choice. Program will terminate.");
                break;
        }
    } while (choice >= 1 && choice <= 4); // Loop until the user chooses to exit

    printf("Exiting program.\n");
    return 0;
}

// Function Definitions

// Display the menu options
void display_menu() {
    printf("\n--- Club Management System ---\n");
    printf("1. Enroll Club\n");
    printf("2. Add Player\n");
    printf("3. Search and Update Player\n");
    printf("4. Display Club Statistics\n");
    printf("Enter 0 to exit.\n");
}

// Add a new club to the system
void enroll_club() {
    if (club_count >= NUM_TEAMS) {
        handle_error("Maximum number of clubs reached.");
        return;
    }

    printf("Enter club name: ");
    getchar(); // Clear input buffer
    fgets(clubs[club_count].club_name, NAME_LEN, stdin);
    clubs[club_count].club_name[strcspn(clubs[club_count].club_name, "\n")] = 0; // Remove newline
    clubs[club_count].player_count = 0; // Initialize player count for the new club
    club_count++;
    printf("Club enrolled successfully.\n");
}

// Add a player to a selected club
void add_player() {
    if (club_count == 0) {
        handle_error("No clubs enrolled. Please enroll a club first.");
        return;
    }

    // List all clubs for selection
    printf("Select a club:\n");
    for (int i = 0; i < club_count; i++) {
        printf("%d. %s\n", i + 1, clubs[i].club_name);
    }

    int club_choice;
    printf("Enter club number: ");
    scanf("%d", &club_choice);
    if (club_choice < 1 || club_choice > club_count) {
        handle_error("Invalid club selection.");
        return;
    }

    if (clubs[club_choice - 1].player_count >= SQUAD_SIZE) {
        handle_error("Maximum players reached for this club.");
        return;
    }

    player_t new_player;
    getchar(); // Clear input buffer

    // Input player details
    printf("Enter player name: ");
    fgets(new_player.name, NAME_LEN, stdin);
    new_player.name[strcspn(new_player.name, "\n")] = 0; // Remove newline

    printf("Enter unique kit number (1-99): ");
    scanf("%d", &new_player.kit_number);

    // Check for duplicate name or kit number
    for (int i = 0; i < clubs[club_choice - 1].player_count; i++) {
        if (strcmp(clubs[club_choice - 1].players[i].name, new_player.name) == 0 ||
            clubs[club_choice - 1].players[i].kit_number == new_player.kit_number) {
            printf("Duplicate player name or kit number detected. Please re-enter.\n");
            return;
        }
    }

    printf("Enter player's DOB (DD MM YYYY): ");
    scanf("%d %d %d", &new_player.dob.day, &new_player.dob.month, &new_player.dob.year);

    printf("Enter player's position: ");
    getchar(); // Clear input buffer
    fgets(new_player.position, POSITION_LEN, stdin);
    new_player.position[strcspn(new_player.position, "\n")] = 0; // Remove newline

    // Add player to the club's roster
    clubs[club_choice - 1].players[clubs[club_choice - 1].player_count++] = new_player;
    printf("Player added successfully.\n");
}

// Search for a player by name or kit number and update details
void search_update() {
    char search_key[NAME_LEN];
    printf("Enter player name or kit number to search: ");
    getchar(); // Clear input buffer
    fgets(search_key, NAME_LEN, stdin);
    search_key[strcspn(search_key, "\n")] = 0; // Remove newline

    int found = 0; // Flag to indicate if a player is found

    for (int i = 0; i < club_count; i++) {
        for (int j = 0; j < clubs[i].player_count; j++) {
            // Search by name or kit number
            if (strcasecmp(clubs[i].players[j].name, search_key) == 0 ||
                atoi(search_key) == clubs[i].players[j].kit_number) {
                found = 1;

                // Display player details
                printf("\nPlayer found in club: %s\n", clubs[i].club_name);
                printf("Name: %s, Kit Number: %d, DOB: %02d-%02d-%04d, Position: %s\n",
                       clubs[i].players[j].name, clubs[i].players[j].kit_number,
                       clubs[i].players[j].dob.day, clubs[i].players[j].dob.month,
                       clubs[i].players[j].dob.year, clubs[i].players[j].position);

                // Prompt updates
                printf("Update player details (leave empty to keep current value):\n");

                // Update name
                printf("Enter new name (current: %s): ", clubs[i].players[j].name);
                char new_name[NAME_LEN];
                fgets(new_name, NAME_LEN, stdin);
                new_name[strcspn(new_name, "\n")] = 0; // Remove newline
                if (strlen(new_name) > 0) {
                    strcpy(clubs[i].players[j].name, new_name);
                }

                // Update kit number
                printf("Enter new kit number (current: %d): ", clubs[i].players[j].kit_number);
                char kit_number_input[NAME_LEN];
                fgets(kit_number_input, NAME_LEN, stdin);
                kit_number_input[strcspn(kit_number_input, "\n")] = 0; // Remove newline
                if (strlen(kit_number_input) > 0) {
                    int new_kit_number = atoi(kit_number_input);
                    clubs[i].players[j].kit_number = new_kit_number;
                }

                // Update position
                printf("Enter new position (current: %s): ", clubs[i].players[j].position);
                char new_position[POSITION_LEN];
                fgets(new_position, POSITION_LEN, stdin);
                new_position[strcspn(new_position, "\n")] = 0; // Remove newline
                if (strlen(new_position) > 0) {
                    strcpy(clubs[i].players[j].position, new_position);
                }

                printf("Player details updated successfully.\n");
                return;
            }
        }
    }

    if (!found) {
        handle_error("Player not found.");
    }
}

// Display all clubs and their player statistics
void display_club_statistics() {
    printf("\n--- Club Statistics ---\n");
    for (int i = 0; i < club_count; i++) {
        printf("Club: %s, Players: %d\n", clubs[i].club_name, clubs[i].player_count);
        for (int j = 0; j < clubs[i].player_count; j++) {
            printf("  Name: %s, Kit Number: %d, DOB: %d-%d-%d, Position: %s\n",
                   clubs[i].players[j].name, clubs[i].players[j].kit_number,
                   clubs[i].players[j].dob.day, clubs[i].players[j].dob.month,
                   clubs[i].players[j].dob.year, clubs[i].players[j].position);
        }
    }
}

// Print error messages
void handle_error(const char *message) {
    printf("Error: %s\n", message);
}
